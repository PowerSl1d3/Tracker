//
//  TrackersStorageService.swift
//  Tracker
//
//  Created by –û–ª–µ–≥ –ê–∫—Å–µ–Ω–µ–Ω–∫–æ on 05.07.2023.
//

import UIKit
import MulticastDelegate

protocol TrackersStorageServiceDelegate {
    func didAppendTracker(_ tracker: Tracker, toCategory category: TrackerCategory, fromViewController vc: UIViewController?)
    func didAppendCategory(_ category: TrackerCategory, fromViewController vc: UIViewController?)
}

extension TrackersStorageServiceDelegate {
    func didAppendTracker(_ tracker: Tracker, toCategory category: TrackerCategory, fromViewController vc: UIViewController?) {}
    func didAppendCategory(_ category: TrackerCategory, fromViewController vc: UIViewController?) {}
}

protocol TrackersStorageService {
    var categories: [TrackerCategory] { get }

    func add(delegate: TrackersStorageServiceDelegate)
    func append(tracker: Tracker, toCategory category: TrackerCategory, fromViewController vc: UIViewController?)
    func append(category: TrackerCategory, fromViewController vc: UIViewController?)
}

final class TrackersStorageServiceImpl {
    static let shared = TrackersStorageServiceImpl()

    private let delegates = MulticastDelegate<TrackersStorageServiceDelegate>()
    private var _categories: [TrackerCategory] = {
        // FIXME: –£–¥–∞–ª–∏—Ç—å –¥–µ–±–∞–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        let homeCategory = TrackerCategory(
            trackers: [
                Tracker(
                    id: UUID(),
                    title: "–°–¥–µ–ª–∞—Ç—å —É–±–æ—Ä–∫—É",
                    color: .systemRed,
                    emoji: "‚õπÔ∏è‚Äç‚ôÇÔ∏è",
                    schedule: [.monday]
                ),
                Tracker(
                    id: UUID(),
                    title: "–°—Ö–æ–¥–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω",
                    color: .systemBlue,
                    emoji: "ü•¶",
                    schedule: [.tuesday]
                ),
                Tracker(
                    id: UUID(),
                    title: "–ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã",
                    color: .systemBrown,
                    emoji: "üçá",
                    schedule: [.wednesday]
                )
            ],
            title: "–î–æ–º–∞—à–Ω–∏–π —É—é—Ç"
        )

        let workCategory = TrackerCategory(
            trackers: [
                Tracker(
                    id: UUID(),
                    title: "–î–æ–¥–µ–ª–∞—Ç—å 14 —Å–ø—Ä–∏–Ω—Ç",
                    color: .systemTeal,
                    emoji: "üòä",
                    schedule: .eventSchedule
                ),
                Tracker(
                    id: UUID(),
                    title: "–°—Ö–æ–¥–∏—Ç—å –Ω–∞ –¥–µ–π–ª–∏",
                    color: .systemIndigo,
                    emoji: "üçâ",
                    schedule: .eventSchedule
                ),
                Tracker(
                    id: UUID(),
                    title: "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é",
                    color: .systemTeal,
                    emoji: "üèñÔ∏è",
                    schedule: .eventSchedule
                )
            ],
            title: "–†–∞–±–æ—Ç–∞"
        )

        return [homeCategory, workCategory]
    }()
}

extension TrackersStorageServiceImpl: TrackersStorageService {
    var categories: [TrackerCategory] { _categories }

    func add(delegate: TrackersStorageServiceDelegate) {
        delegates += delegate
    }

    func append(tracker: Tracker, toCategory category: TrackerCategory, fromViewController vc: UIViewController?) {
        guard let index = _categories.firstIndex(where: { $0.title == category.title }) else {
            return
        }

        var newTrackers = category.trackers
        newTrackers.append(tracker)
        _categories[index] = TrackerCategory(trackers: newTrackers, title: category.title)

        delegates |> { delegate in
            delegate.didAppendTracker(tracker, toCategory: category, fromViewController: vc)
        }
    }

    func append(category: TrackerCategory, fromViewController vc: UIViewController?) {
        guard _categories.first(where: { $0.title == category.title }) == nil else {
            return
        }

        _categories.append(category)

        delegates |> { delegate in
            delegate.didAppendCategory(category, fromViewController: vc)
        }
    }
}
